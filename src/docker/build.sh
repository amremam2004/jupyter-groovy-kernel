#!/usr/bin/env bash
set -e

# This script is used to ensure the most recent jar file and kernel.json file
# are copied into the working directory before running the docker build.

KERNEL_NAME=jupyter-groovy-kernel
KERNEL_GROUP=lappsgrid

# Parse the latest VERSION. The VERSION file is generated by Maven during the build.
VERSION=`cat ../../VERSION`

# The name of the jar file generated by Maven.  The jar file name just happens to be
# the same as the default kernel name, but this can not be relied upon so we can not
# use $KERNEL_NAME here.
jar=jupyter-groovy-kernel-$VERSION.jar

# Where the latest jar file can be located
targetjar=../../target/$jar

function bold {
    echo -e "\033[1m\033[97m$@\033[0m"
}

function usage {
    echo
    echo "$(bold ./build.sh) - A Bash script for generating the Docker image with the"
    echo "Jupyter Groovy kernel pre-installed."
    echo
    bold "USAGE"
    echo "    ./build [-n|--name <KERNEL_NAME>] [-g|--group <KERNEL_GROUP>]"
    echo
    bold "OPTIONS"
    echo "    -n | --name"
    echo "        Specifies the kernel name. Default is jupyter-groovy-kernel."
    echo "    -g | --group"
    echo "        Specifies the kernel group. Default is lappsgrid."
    echo
    bold "EXAMPLE"
    echo "    $> ./build.sh --name igroovy --group example"
    echo "    $> docker run -p 8888:8888 example/igroovy"
    echo
}

args=
while [ -n "$1" ] ; do
    case $1 in
        -n|--name)
            KERNEL_NAME=$2
            shift 2
            ;;
        -g|--group)
            KERNEL_GROUP=$2
            shift 2
            ;;
        -nc|--no-cache)
            args=--no-cache
            shift
            ;;
        -h|--help)
            usage
            exit 1
            ;;
        *)
            echo "Unknown option $1"
            usage
            exit 1
            ;;
    esac
done

set -u

if [ ! -e $targetjar ] ; then
    echo "JAR file not found. Building it now."
    cd ../../
    mvn clean package
    # We need to parse the VERSION file again.
    VERSION=`cat VERSION`
    cd -
fi

# The location of the kernel.json template.
kernel=../../src/distribution/kernel.json

if [ ! -e $jar ] || [ $targetjar -nt $jar ] ; then
    echo "Copying $targetjar"
    cp $targetjar .
fi

if [ ! -e kernel.json ] || [ $kernel -nt kernel.json ] ; then
    echo "Patching the kernel.json file"
    cat $kernel | sed "s|__PATH__|/opt/groovy/$jar|" > kernel.json
fi

echo "Building the Docker container $KERNEL_GROUP/$KERNEL_NAME with JAR file $jar"
docker build $args --build-arg VERSION=$VERSION -t $KERNEL_GROUP/$KERNEL_NAME .

